{"version":3,"sources":["components/Cronometro.js","App.js","serviceWorker.js","index.js"],"names":["Cronometro","Card","className","border","key","this","props","item","id","Header","as","hour","minute","second","update","Body","onClick","onUpdate","remove","Title","task","Text","project","optn","Button","variant","size","onStart","onStop","Form","onSubmit","save","Group","Control","type","name","placeholder","onChange","onInputChange","required","newItem","noUpdate","Component","App","updateItem","index","setState","items","state","map","i","noUpdateItem","e","target","value","_add","preventDefault","newItems","uuid","time","count","_save","_remove","position","slice","getSeconds","s","Math","floor","getMinutes","getHour","handleClickStart","toggle","setInterval","ind","handleClickStop","clearInterval","Container","Row","Col","md","span","offset","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf72dc04.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Card, Button, Form} from 'react-bootstrap';\r\n\r\nclass Cronometro extends Component{\r\n    render(){\r\n      return(\r\n            <div>\r\n                <Card className=\"card text-center\" border=\"primary\" key={this.props.item.id}>\r\n                  <Card.Header as=\"h2\">\r\n                    {this.props.hour}:{this.props.minute}:{this.props.second}\r\n                  </Card.Header>\r\n                  {this.props.item.update === false ?\r\n                    <Card.Body>\r\n                      <i className=\"far fa-edit\" onClick={this.props.onUpdate}></i>\r\n                      <i className=\"far fa-trash-alt\" onClick={this.props.remove}></i>\r\n                      <Card.Title as=\"h1\">{this.props.item.task}</Card.Title>\r\n                      <Card.Text>{this.props.item.project}</Card.Text>\r\n                      { this.props.item.optn === \"start\" ?\r\n                        <Button variant=\"info\" size=\"lg\" onClick={this.props.onStart}>{this.props.item.optn}</Button>\r\n                        :\r\n                        <Button variant=\"warning\" size=\"lg\" onClick={this.props.onStop}>{this.props.item.optn}</Button>\r\n                      }\r\n                    </Card.Body> :\r\n                    <Card.Body>\r\n                      <Form onSubmit={this.props.save}>\r\n                        <Form.Group>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            name=\"task\"\r\n                            placeholder={this.props.item.task ? this.props.item.task : \"Ingresa Tarea\"}\r\n                            onChange={this.props.onInputChange}\r\n                            required/>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            name=\"project\"\r\n                            placeholder={this.props.item.project ? this.props.item.project : \"Ingresa Proyecto\"}\r\n                            onChange={this.props.onInputChange}\r\n                            required/>\r\n                        </Form.Group>\r\n                          <Button variant=\"outline-success\" type=\"submit\">\r\n                            {this.props.item.newItem === false ? \"Update\" : \"Create\"}\r\n                          </Button>\r\n                        <Button variant=\"outline-danger\" onClick={this.props.noUpdate}>Cancelar</Button>\r\n                      </Form>\r\n                    </Card.Body>\r\n                  }\r\n                </Card>\r\n              </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default Cronometro;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Col, Row, Button} from 'react-bootstrap';\nimport uuid from 'uuid/v4'\nimport Cronometro from './components/Cronometro';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      items: [\n        {id:uuid(), task:\"React\", project:\"Conometro\", time: 0, optn:'start', update:false, newItem:false}\n      ],\n      task: '',\n      project: ''\n    }\n  }\n\n  updateItem = (index) =>{\n    this.setState({\n      items: this.state.items.map((item,i) => {\n        if (index === i){\n          item.update = true\n        }\n        return item\n      })\n    });\n  }\n\n  noUpdateItem = (index) =>{\n    this.setState({\n      items: this.state.items.map((item,i) => {\n        if (index === i){\n          item.update = false\n        }\n        return item\n      })\n    });\n  }\n\n  onInputChange = (e) =>{\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  _add = (e) =>{\n    e.preventDefault()\n    let { items } = this.state;\n    let newItems = [\n      ...items,\n      { id:uuid(),\n        task:'',\n        project:'',\n        time: 0,\n        count: 0,\n        optn:\"start\",\n        update:true,\n        newItem:true}\n      ]\n      this.setState({ items : newItems });\n    }\n\n    _save = (i) =>{\n      this.setState({\n        items: this.state.items.map((item) =>\n        i.id === item.id ? {\n          id: item.id,\n          task:this.state.task,\n          project:this.state.project,\n          time: item.time,\n          count: item.count,\n          optn:item.optn,\n          update: false,\n          newItem:false} : item\n        )\n      });\n    }\n\n    _remove = (position) =>{\n      let { items } = this.state;\n\n      let newItems = [\n        ...items.slice(0, position),\n        ...items.slice(position + 1),\n      ]\n\n      this.setState({ items : newItems });\n\n    }\n\n    getSeconds = (s) => {\n      return  Math.floor(s % 60);\n    }\n\n    getMinutes = (s) =>{\n      return  Math.floor(s / 60) % 60;\n    }\n\n    getHour = (s) =>{\n      return Math.floor(s / 60 / 60);\n    }\n\n    handleClickStart = (i, index) =>{\n      this.toggle(index)\n      const count = setInterval(() => {\n        this.setState({\n          items: this.state.items.map((item,ind) => {\n            if (i.id === item.id){\n              item.time = item.time + 1\n              item.count = count\n            }\n            return item\n          })\n        });\n      }, 1000)\n    }\n\n    handleClickStop = (i, index) =>{\n      this.toggle(index)\n      clearInterval(i.count);\n    }\n\n    toggle(index){\n      this.setState({\n        items: this.state.items.map((item,i) => {\n          if (index === i){\n            if (item.optn === \"start\"){\n              item.optn = \"stop\"\n            }else if (item.optn === \"stop\"){\n              item.optn = \"start\"\n            }\n          }\n          return item\n        })\n      })\n    }\n\n    render(){\n      const { items } = this.state;\n      return(\n        <Container>\n          <h1 className=\"text-center\">CRONOMETROS</h1>\n          <hr/>\n          <Row>\n            {items.map((item, index) => {\n              return(\n                <Col md={4}>\n                  <Cronometro\n                    item={item}\n                    index={index}\n                    second={this.getSeconds(item.time)}\n                    minute={this.getMinutes(item.time)}\n                    hour={this.getHour(item.time)}\n                    onUpdate={() => this.updateItem(index)}\n                    noUpdate={() => this.noUpdateItem(index)}\n                    onInputChange={this.onInputChange}\n                    remove={() => this._remove(index)}\n                    save={() => this._save(item)}\n                    onStart={() => this.handleClickStart(item, index)}\n                    onStop={() => this.handleClickStop(item , index)}\n                    onSubmit={() => this._save(item)}\n                    />\n                </Col>\n              )\n            })}\n          </Row>\n          <hr/>\n          <Col md={{span:4, offset:5}}><Button variant=\"success\" onClick={this._add.bind(this)}>Agregar Cronometro</Button></Col>\n        </Container>\n      )\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}